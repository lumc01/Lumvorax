# Makefile.individual - Tests individuels pour 44 modules (README.md)
CC = gcc
CFLAGS = -Wall -Wextra -std=c99 -g -O3 -march=native -fPIC -D_GNU_SOURCE -D_POSIX_C_SOURCE=200809L -I./src/common -I./src/debug
LDFLAGS = -lm -lpthread -lrt

# R√©pertoires
SRC_DIR = src
BIN_DIR = bin
INDIVIDUAL_TEST_DIR = src/tests/individual
LOG_DIR = logs/individual

# Tous les modules sources (objets compil√©s n√©cessaires)
CORE_OBJECTS = \
        $(SRC_DIR)/lum/lum_core.o \
        $(SRC_DIR)/vorax/vorax_operations.o \
        $(SRC_DIR)/binary/binary_lum_converter.o \
        $(SRC_DIR)/parser/vorax_parser.o \
        $(SRC_DIR)/logger/lum_logger.o \
        $(SRC_DIR)/logger/log_manager.o \
        $(SRC_DIR)/debug/memory_tracker.o \
        $(SRC_DIR)/debug/forensic_logger.o \
        $(SRC_DIR)/debug/ultra_forensic_logger.o \
        $(SRC_DIR)/debug/enhanced_logging.o \
        $(SRC_DIR)/debug/logging_system.o \
        $(SRC_DIR)/crypto/crypto_validator.o \
        $(SRC_DIR)/persistence/data_persistence.o \
        $(SRC_DIR)/persistence/transaction_wal_extension.o \
        $(SRC_DIR)/persistence/recovery_manager_extension.o \
        $(SRC_DIR)/optimization/memory_optimizer.o \
        $(SRC_DIR)/optimization/pareto_optimizer.o \
        $(SRC_DIR)/optimization/pareto_inverse_optimizer.o \
        $(SRC_DIR)/optimization/simd_optimizer.o \
        $(SRC_DIR)/optimization/zero_copy_allocator.o \
        $(SRC_DIR)/parallel/parallel_processor.o \
        $(SRC_DIR)/metrics/performance_metrics.o \
        $(SRC_DIR)/advanced_calculations/audio_processor.o \
        $(SRC_DIR)/advanced_calculations/image_processor.o \
        $(SRC_DIR)/advanced_calculations/golden_score_optimizer.o \
        $(SRC_DIR)/advanced_calculations/tsp_optimizer.o \
        $(SRC_DIR)/advanced_calculations/neural_advanced_optimizers.o \
        $(SRC_DIR)/advanced_calculations/neural_ultra_precision_architecture.o \
        $(SRC_DIR)/advanced_calculations/matrix_calculator.o \
        $(SRC_DIR)/advanced_calculations/neural_network_processor.o \
        $(SRC_DIR)/complex_modules/realtime_analytics.o \
        $(SRC_DIR)/complex_modules/distributed_computing.o \
        $(SRC_DIR)/complex_modules/ai_optimization.o \
        $(SRC_DIR)/complex_modules/ai_dynamic_config_manager.o \
        $(SRC_DIR)/file_formats/lum_secure_serialization.o \
        $(SRC_DIR)/file_formats/lum_native_file_handler.o \
        $(SRC_DIR)/file_formats/lum_native_universal_format.o \
        $(SRC_DIR)/spatial/lum_instant_displacement.o \
        $(SRC_DIR)/network/hostinger_resource_limiter.o

# Tests individuels sources
INDIVIDUAL_TEST_SOURCES = $(wildcard $(INDIVIDUAL_TEST_DIR)/test_*_individual.c)
INDIVIDUAL_TEST_EXECUTABLES = $(INDIVIDUAL_TEST_SOURCES:$(INDIVIDUAL_TEST_DIR)/%.c=$(BIN_DIR)/%)

# Cible principale : compiler TOUS les 44 tests individuels
.PHONY: all-individual clean-individual test-individual-all test-individual-critical directories-individual

all-individual: directories-individual $(CORE_OBJECTS) $(INDIVIDUAL_TEST_EXECUTABLES)

# Cr√©er r√©pertoires n√©cessaires
directories-individual:
	mkdir -p $(BIN_DIR) $(LOG_DIR)
	mkdir -p $(LOG_DIR)/lum_core $(LOG_DIR)/vorax_operations $(LOG_DIR)/vorax_parser
	mkdir -p $(LOG_DIR)/binary_lum_converter $(LOG_DIR)/lum_logger $(LOG_DIR)/log_manager
	mkdir -p $(LOG_DIR)/memory_tracker $(LOG_DIR)/forensic_logger $(LOG_DIR)/ultra_forensic_logger
	mkdir -p $(LOG_DIR)/enhanced_logging $(LOG_DIR)/logging_system $(LOG_DIR)/crypto_validator
	mkdir -p $(LOG_DIR)/data_persistence $(LOG_DIR)/transaction_wal_extension
	mkdir -p $(LOG_DIR)/recovery_manager_extension $(LOG_DIR)/memory_optimizer
	mkdir -p $(LOG_DIR)/pareto_optimizer $(LOG_DIR)/pareto_inverse_optimizer
	mkdir -p $(LOG_DIR)/simd_optimizer $(LOG_DIR)/zero_copy_allocator
	mkdir -p $(LOG_DIR)/parallel_processor $(LOG_DIR)/performance_metrics
	mkdir -p $(LOG_DIR)/audio_processor $(LOG_DIR)/image_processor
	mkdir -p $(LOG_DIR)/golden_score_optimizer $(LOG_DIR)/tsp_optimizer
	mkdir -p $(LOG_DIR)/neural_advanced_optimizers $(LOG_DIR)/neural_ultra_precision_architecture
	mkdir -p $(LOG_DIR)/matrix_calculator $(LOG_DIR)/neural_network_processor
	mkdir -p $(LOG_DIR)/realtime_analytics $(LOG_DIR)/distributed_computing
	mkdir -p $(LOG_DIR)/ai_optimization $(LOG_DIR)/ai_dynamic_config_manager
	mkdir -p $(LOG_DIR)/lum_secure_serialization $(LOG_DIR)/lum_native_file_handler
	mkdir -p $(LOG_DIR)/lum_native_universal_format $(LOG_DIR)/lum_instant_displacement
	mkdir -p $(LOG_DIR)/hostinger_resource_limiter $(LOG_DIR)/summary

# Compilation des tests individuels
$(BIN_DIR)/test_%_individual: $(INDIVIDUAL_TEST_DIR)/test_%_individual.c $(CORE_OBJECTS)
	$(CC) $(CFLAGS) $< $(CORE_OBJECTS) -o $@ $(LDFLAGS)

# Ex√©cution TOUS les 44 tests individuels (exigence README.md)
test-individual-all: all-individual
	@echo "=== EX√âCUTION 44 TESTS INDIVIDUELS (README.md) ==="
	@echo "Conformit√©: Tests individuels avec logs forensiques nanoseconde"
	@tests_passed=0; tests_total=0; \
	for test in $(INDIVIDUAL_TEST_EXECUTABLES); do \
		if [ -f "$$test" ]; then \
			tests_total=$$((tests_total + 1)); \
			echo ""; \
			echo "üîç Ex√©cution: $$test"; \
			if ./$$test; then \
				echo "‚úÖ $$test: R√âUSSI"; \
				tests_passed=$$((tests_passed + 1)); \
			else \
				echo "‚ùå $$test: √âCHEC"; \
			fi; \
		fi; \
	done; \
	echo ""; \
	echo "=== R√âSUM√â TESTS INDIVIDUELS ==="; \
	echo "Tests ex√©cut√©s: $$tests_total"; \
	echo "Tests r√©ussis: $$tests_passed"; \
	echo "Taux de r√©ussite: $$((tests_passed * 100 / tests_total))%"; \
	if [ $$tests_passed -eq $$tests_total ]; then \
		echo "‚úÖ TOUS LES TESTS INDIVIDUELS R√âUSSIS"; \
	else \
		echo "‚ùå CERTAINS TESTS INDIVIDUELS ONT √âCHOU√â"; \
	fi

# Tests critiques seulement (modules prioritaires README.md)
test-individual-critical: all-individual
	@echo "=== TESTS INDIVIDUELS CRITIQUES (README.md corrections) ==="
	@for module in lum_core matrix_calculator simd_optimizer neural_network_processor; do \
		test_exec=$(BIN_DIR)/test_$${module}_individual; \
		if [ -f "$$test_exec" ]; then \
			echo ""; \
			echo "üîç Test critique: $$module"; \
			if ./$$test_exec; then \
				echo "‚úÖ $$module: CORRECTION VALID√âE"; \
			else \
				echo "‚ùå $$module: CORRECTION √âCHOU√âE"; \
			fi; \
		fi; \
	done

# Validation forensique obligatoire (README.md)
validate-forensic: test-individual-all
	@echo "=== VALIDATION FORENSIQUE TESTS INDIVIDUELS ==="
	@log_count=0; \
	for module_dir in $(LOG_DIR)/*; do \
		if [ -d "$$module_dir" ] && [ "$$module_dir" != "$(LOG_DIR)/summary" ]; then \
			module_name=$$(basename "$$module_dir"); \
			log_file="$$module_dir/test_$${module_name}.log"; \
			if [ -f "$$log_file" ]; then \
				log_count=$$((log_count + 1)); \
				echo "‚úÖ Log forensique trouv√©: $$log_file"; \
			else \
				echo "‚ùå Log forensique manquant: $$log_file"; \
			fi; \
		fi; \
	done; \
	echo ""; \
	echo "Logs forensiques g√©n√©r√©s: $$log_count"; \
	if [ $$log_count -ge 35 ]; then \
		echo "‚úÖ VALIDATION FORENSIQUE R√âUSSIE"; \
	else \
		echo "‚ùå LOGS FORENSIQUES INSUFFISANTS"; \
	fi

# Nettoyage tests individuels
clean-individual:
	rm -f $(INDIVIDUAL_TEST_EXECUTABLES)
	rm -rf $(LOG_DIR)/*
	@echo "Tests individuels nettoy√©s"

# Statistiques compilation
stats-individual:
	@echo "=== STATISTIQUES TESTS INDIVIDUELS ==="
	@test_count=$$(find $(INDIVIDUAL_TEST_DIR) -name "test_*_individual.c" | wc -l); \
	exec_count=$$(find $(BIN_DIR) -name "test_*_individual" 2>/dev/null | wc -l); \
	echo "Tests sources: $$test_count"; \
	echo "Tests compil√©s: $$exec_count"; \
	if [ $$test_count -eq 44 ]; then \
		echo "‚úÖ 44 modules test√©s (README.md conforme)"; \
	else \
		echo "‚ùå Modules manquants: $$((44 - test_count))"; \
	fi