
# PROMPT SYSTÈME LUM/VORAX - RÈGLES ABSOLUES v2.1
## MISE À JOUR CRITIQUE 2025-01-18 - CORRECTION MODULES BLOQUÉS

### SECTION 1: LECTURE OBLIGATOIRE PRÉALABLE
**ORDRE STRICT** : Lire INTÉGRALEMENT avant toute modification :
1. STANDARD_NAMES.md (COMPLET - 385+ entrées)
2. Ce prompt.txt (COMPLET)
3. Code source A→Z (TOUS fichiers, TOUTES lignes)

### SECTION 2: MODULES CRITIQUES IDENTIFIÉS (118+ MODULES)
**MODULES BLOQUÉS À CORRIGER PRIORITAIREMENT** :
- Neural Blackbox Computer : Fonctions stub → Implémentations complètes
- Matrix Calculator : Conflits typedef → Définitions uniques
- Secure Serialization : Erreurs compilation → Module fonctionnel
- Instant Displacement : Headers-only → Validation complète

### SECTION 3: RÈGLES ANTI-RÉCURRENCE ABSOLUES

#### 3.1 INTERDICTIONS STRICTES
**JAMAIS** :
- Créer stub sans implémentation complète
- Redéfinir typedef existant
- Inclure header non-existant
- Modifier sans vérifier dépendances
- Supprimer fichier .md existant
- Falsifier métriques ou résultats

#### 3.2 VALIDATIONS OBLIGATOIRES AVANT MODIFICATION
**TOUJOURS** vérifier :
1. Nom existe dans STANDARD_NAMES.md
2. Aucun conflit typedef dans projet
3. Tous includes disponibles
4. Compilation complète réussie
5. Tests 1M+ LUMs fonctionnels
6. Aucune dépendance circulaire

#### 3.3 STRUCTURE MODULES OBLIGATOIRE
**CHAQUE MODULE DOIT AVOIR** :
- Header (.h) avec déclarations complètes
- Source (.c) avec implémentations 100%
- Protection double-free intégrée
- Tests unitaires validés
- Documentation STANDARD_NAMES.md
- Conformité conventions nommage

### SECTION 4: CONVENTIONS NOMMAGE UNIFIÉES
**TYPES** : `nom_t` (ex: neural_blackbox_computer_t)
**ENUMS** : `nom_e` (ex: neural_complexity_target_e)  
**FONCTIONS** : `module_action()` (ex: neural_blackbox_create())
**CONSTANTES** : `MODULE_CONSTANT` (ex: NEURAL_BLACKBOX_MAGIC)
**VARIABLES** : `snake_case` (ex: current_loss)

### SECTION 5: RÉSOLUTION ERREURS RÉCURRENTES

#### 5.1 ERREURS COMPILATION INTERDITES
- `undefined reference` → Implémentation manquante
- `redefinition` → Conflit typedef/fonction
- `implicit declaration` → Include manquant
- `conflicting types` → Signatures incohérentes

#### 5.2 SOLUTIONS STANDARD APPROUVÉES
**Stub manquante** → Implémentation complète immédiate
**Conflit typedef** → Une seule définition dans .h
**Include manquant** → Ajouter include approprié
**Test échec** → Correction + validation

### SECTION 6: TESTS OBLIGATOIRES MINIMUM
**AVANT VALIDATION** :
1. Compilation clean (0 erreur, 0 warning)
2. Test 1M LUMs réussi
3. Test stress 100M préparé
4. Validation mémoire sans fuite
5. Tests unitaires 100% pass
6. Conformité STANDARD_NAMES.md

### SECTION 7: MODULES PRIORITAIRES À VALIDER
**CORE MODULES** (18) :
- lum_core, vorax_operations, vorax_parser
- binary_lum_converter, lum_logger, log_manager
- memory_optimizer, pareto_optimizer, simd_optimizer
- parallel_processor, performance_metrics, crypto_validator
- data_persistence, transaction_wal_extension, recovery_manager_extension
- memory_tracker, forensic_logger, lum_secure_serialization

**ADVANCED MODULES** (50+) :
- neural_blackbox_computer ⚠️ PRIORITÉ ABSOLUE
- matrix_calculator ⚠️ CORRECTION URGENTE
- quantum_simulator, neural_network_processor
- realtime_analytics, distributed_computing, ai_optimization
- image_processor, audio_processor, video_processor
- golden_score_optimizer, mathematical_research_engine
- + tous modules src/advanced_calculations/
- + tous modules src/complex_modules/

**SPECIALIZED MODULES** (50+) :
- homomorphic_encryption, blackbox_universal_module
- collatz_analyzer, tsp_optimizer, knapsack_optimizer
- lum_instant_displacement ⚠️ VALIDATION REQUISE
- zero_copy_allocator, pareto_inverse_optimizer
- + tous modules src/crypto/, src/file_formats/, src/spatial/

### SECTION 8: PERFORMANCE TARGETS AUTHENTIQUES
**MINIMUMS REQUIS** :
- Throughput : 10M+ LUMs/seconde
- Mémoire : <100MB pour 1M LUMs  
- Latence : <100ms création 1M LUMs
- Precision : Erreur <1e-15 calculs critiques
- Scalabilité : Support 100M+ éléments

### SECTION 9: AUTHENTIFICATION RÉSULTATS
**MÉTRIQUES VÉRIFIABLES** :
- Timestamps CLOCK_MONOTONIC réels
- SHA-256 checksums pour intégrité
- Logs forensiques horodatés
- Comparaisons standards industriels
- Tests reproductibles multi-machines

### SECTION 10: GESTION DÉPENDANCES
**ORDRE INCLUSION STRICT** :
1. common_types.h (types de base)
2. lum_core.h (structures principales)
3. Headers spécialisés (module-specific)
4. Headers debug (memory_tracker, forensic_logger)

**INTERDICTION DÉPENDANCES CIRCULAIRES** :
- A inclut B, B inclut A ❌
- Forward declarations obligatoires
- Validation make clean && make all

### SECTION 11: NOUVEAUX MODULES CRÉATION
**PROCÉDURE OBLIGATOIRE** :
1. Vérifier nom disponible STANDARD_NAMES.md
2. Créer header complet avec protections
3. Implémenter source avec toutes fonctions
4. Ajouter tests unitaires
5. Mettre à jour STANDARD_NAMES.md
6. Valider compilation + tests
7. Créer rapport forensique

### SECTION 12: RAPPORT GÉNÉRATION
**NOMMAGE RAPPORTS** : `0XX_RAPPORT_[SUJET]_DETAILLE_YYYYMMDD_HHMMSS.md`
**CONTENU OBLIGATOIRE** :
- Inspection ligne par ligne
- Comparaisons standards industriels  
- Métriques authentiques vérifiables
- Auto-critique et amélioration
- Conformité STANDARD_NAMES.md
- Plan correction détaillé

### SECTION 13: VALIDATION FINALE
**CHECKLIST ABSOLUE** :
- [ ] Lecture STANDARD_NAMES.md complète
- [ ] Inspection code source A→Z
- [ ] Compilation 0 erreur 0 warning
- [ ] Tests 1M+ LUMs réussis
- [ ] Conformité conventions nommage
- [ ] Aucune dépendance circulaire
- [ ] Documentation mise à jour
- [ ] Rapport forensique généré

**ÉTAT ACTUEL PROJET** : 118+ modules identifiés
**MODULES FONCTIONNELS** : ~80 (68%)
**MODULES BLOQUÉS** : 4 critiques + ~34 partiels
**PROCHAINE ÉTAPE** : Correction modules bloqués prioritaires

### SECTION 14: DÉTECTION ANOMALIES
**ALERTES AUTOMATIQUES** :
- Performance irréaliste (>100x standards)
- Métriques incohérentes
- Tests toujours identiques
- Logs sans variance
- Checksums identiques
- Timestamps suspects

### SECTION 15: RÈGLES SPÉCIFIQUES PAR MODULE TYPE

#### 15.1 MODULES NEURAL/IA
- Implémentations natives obligatoires (pas simulation)
- Gradients calculés mathématiquement
- Architecture documentée précisément
- Tests convergence validés

#### 15.2 MODULES CRYPTO
- Conformité RFC standards
- Vecteurs test officiels
- Timing attacks protection
- Validation croisée

#### 15.3 MODULES PERFORMANCE
- Benchmarks reproductibles
- Comparaisons équitables
- Métriques standardisées
- Overhead documenté

**VERSION** : v2.1 - 2025-01-18 20:00:00
**MODULES COUVERTS** : 118+ confirmés
**MISE À JOUR SUIVANTE** : Après correction 4 modules bloqués
