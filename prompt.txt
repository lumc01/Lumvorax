
# PROMPT.TXT - PROTOCOLE COMPLET SYSTÈME LUM/VORAX
## MISE À JOUR COMPLÈTE 2025-01-10 15:30:00 UTC

### PHASE 1 : RÈGLES FONDAMENTALES (CONSERVATION INTÉGRALE)
1. **Conservation mathématique absolue** : INPUT = OUTPUT pour toutes opérations VORAX
2. **Protection mémoire critique** : Intégration memory_address dans TOUTES structures LUM
3. **Tests stress obligatoires** : Minimum 1M+ LUMs, objectif 100M+ pour tous modules
4. **Compilation zéro warning** : Tous warnings traités comme erreurs critiques
5. **Traçabilité forensique** : Horodatage nanoseconde CLOCK_MONOTONIC obligatoire
6. **Nomenclature standardisée** : Conformité STANDARD_NAMES.md à 100%

### PHASE 2 : MODULES CORE SYSTEM (STATUT : 100% COMPLÉTÉS)
7. **lum_core.c/h** : Structures fondamentales 48 bytes avec memory_address
8. **vorax_operations.c/h** : Opérations SPLIT/CYCLE/transformations mathématiques
9. **binary_lum_converter.c/h** : Conversion binaire/hexadécimal vers LUM
10. **vorax_parser.c/h** : Parser DSL VORAX avec syntaxe complète
11. **lum_logger.c/h** : Logging structuré avec memory_tracker intégré

### PHASE 3 : MODULES ADVANCED CALCULATIONS (STATUT : 100% COMPLÉTÉS)
12. **tsp_optimizer.c/h** : Optimisation trajets LUM pour localité mémoire
13. **knapsack_optimizer.c/h** : Allocation ressources optimale selon ratio valeur/coût
14. **collatz_analyzer.c/h** : Prédiction convergence transformations VORAX
15. **matrix_calculator.c/h** : Calculs matriciels massifs avec vectorisation SIMD
16. **quantum_simulator.c/h** : Simulation quantique pour exploration optimisations
17. **neural_network_processor.c/h** : IA neuronale apprentissage patterns LUM

### PHASE 4 : MODULES COMPLEX (STATUT : 100% COMPLÉTÉS)
18. **ai_optimization.c/h** : Métaheuristiques avancées (génétique, PSO, ACO)
19. **realtime_analytics.c/h** : Analytique temps réel sur flux LUM
20. **distributed_computing.c/h** : Calcul distribué multi-nœuds

### PHASE 5 : NOUVEAUX MODULES MULTIMEDIA (À IMPLÉMENTER)
21. **image_processor.c/h** : Traitement d'images via transformations LUM
    - Conversion pixels → LUM structures
    - Filtres VORAX sur matrices d'images
    - Compression/décompression basée présence
    - Tests stress 100M+ pixels obligatoires

22. **audio_processor.c/h** : Traitement audio via ondes LUM
    - Échantillons audio → séquences LUM temporelles
    - FFT/IFFT via opérations VORAX CYCLE
    - Filtrage fréquentiel par transformations mathématiques
    - Tests stress 100M+ échantillons obligatoires

23. **video_processor.c/h** : Traitement vidéo multi-dimensionnel
    - Frames vidéo → matrices LUM 3D (x,y,temps)
    - Compression temporelle via SPLIT/CYCLE
    - Détection mouvement par différentielles LUM
    - Tests stress 100M+ frames obligatoires

### PHASE 6 : MODULE GOLDEN SCORE (OPTIMISATION ULTIME)
24. **golden_score_optimizer.c/h** : Score d'optimisation globale système
    - Métrique unifiée performance/mémoire/énergie
    - Ratio doré φ = 1.618 comme référence optimale
    - Auto-tuning paramètres système vers score maximal
    - Benchmarks comparatifs vs standards industriels

### PHASE 7 : PROTOCOLES VALIDATION (RENFORCÉS)
25. **Compilation propre obligatoire** : 0 erreur, 0 warning, flags -Wall -Wextra
26. **Tests unitaires exhaustifs** : Chaque fonction testée individuellement
27. **Tests stress 100M+** : TOUS modules doivent supporter 100M+ éléments
28. **Memory tracking complet** : AddressSanitizer + memory_tracker custom
29. **Performance benchmarking** : Comparaison vs standards avec métriques précises
30. **Timing nanoseconde précis** : clock_gettime(CLOCK_MONOTONIC) obligatoire

### PHASE 8 : PROTOCOLES FORENSIQUES (NOUVEAUX)
31. **Horodatage précis** : Format YYYYMMDD_HHMMSS_nanoseconds
32. **Hashing cryptographique** : SHA-256 de tous fichiers sources
33. **Traçabilité modifications** : Git commit + diff complet
34. **Rapports authentiques** : Données mesurées réellement, pas simulées
35. **Validation croisée** : Multiple runs pour confirmer stabilité

### PHASE 9 : OPTIMISATIONS CALCULS AVANCÉS (EXTENSION)
Basé sur calculs_avances_complexes_vorax_2025.vorax :

36. **Transformation Pareto Multicritères** : 5 dimensions, résolution 1000
37. **Fusion Quantique LUM Entanglée** : 16 qubits, états de Bell
38. **Compression Fractale Auto-Similaire** : Profondeur 12, mandelbrot/julia
39. **Optimisation Génétique Multi-Population** : 10 populations, 2000 individus
40. **Réseau Neuronal Deep Learning** : 8 couches, 2048 neurones/couche
41. **Blockchain LUM Consensus Byzantin** : 200 nœuds, tolérance 33%

### PHASE 10 : PROTOCOLES EXÉCUTION FINALE
42. **Compilation complète** : make clean && make all
43. **Tests stress globaux** : ./bin/lum_vorax --stress-test-all-modules
44. **Validation performance** : Métriques > standards industriels
45. **Rapport forensique final** : Documentation complète résultats authentiques
46. **Conformité 100%** : Tous protocoles respectés sans exception

### EXIGENCES TECHNIQUES ABSOLUES
- **Langage** : C99 strict, compatibilité POSIX
- **Compilateur** : Clang avec flags sécurité maximale
- **Architecture** : Support x86_64, ARM64 optionnel
- **Mémoire** : Protection double-free, leak detection intégré
- **Performance** : Objectif > 10M LUMs/seconde, > 4 Gbps débit
- **Threading** : POSIX threads, synchronisation mutexes
- **Cryptographie** : SHA-256, AES-256 pour validation
- **Logging** : Structured logging, rotation automatique

### CRITÈRES SUCCÈS VALIDATION
- **Compilation** : 0 erreur, 0 warning
- **Tests unitaires** : 100% pass rate
- **Tests stress** : 100M+ éléments supportés
- **Memory safety** : 0 leak, 0 corruption
- **Performance** : Objectifs débit atteints
- **Conformité** : 100% protocoles respectés
