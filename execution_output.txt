=== LUM/VORAX System Demo ===
Implementation complete du concept LUM/VORAX en C

1. Test des opérations de base LUM...
  ✓ Création de 3 LUMs: LUM[1]: presence=1, pos=(0,0), type=0, ts=1757018896
LUM[2]: presence=1, pos=(1,0), type=0, ts=1757018896
LUM[3]: presence=0, pos=(2,0), type=0, ts=1757018896
  ✓ Groupe créé avec 3 LUMs
Group[4]: 3 LUMs
  LUM[1]: presence=1, pos=(0,0), type=0, ts=1757018896
  LUM[2]: presence=1, pos=(1,0), type=0, ts=1757018896
  LUM[3]: presence=0, pos=(2,0), type=0, ts=1757018896

2. Test des opérations VORAX...
  Groupe 1: 3 LUMs, Groupe 2: 2 LUMs
  ✓ Fusion réussie: 5 LUMs -> 5 LUMs
  ✓ Split réussi: 5 LUMs -> 2 groupes
  ✓ Cycle réussi: Cycle completed successfully

3. Test de conversion binaire <-> LUM...
  Conversion de l'entier 42 en LUMs...
  ✓ Conversion réussie: 32 bits traités
  Binaire: 00000000000000000000000000101010
  ✓ Conversion inverse: 42 -> 42 (OK)

  Conversion de la chaîne binaire '11010110' en LUMs...
  ✓ Conversion réussie: 8 LUMs créées
Group[49]: 8 LUMs
  LUM[50]: presence=1, pos=(0,0), type=0, ts=1757018896
  LUM[51]: presence=1, pos=(1,0), type=0, ts=1757018896
  LUM[52]: presence=0, pos=(2,0), type=0, ts=1757018896
  LUM[53]: presence=1, pos=(3,0), type=0, ts=1757018896
  LUM[54]: presence=0, pos=(4,0), type=0, ts=1757018896
  LUM[55]: presence=1, pos=(5,0), type=0, ts=1757018896
  LUM[56]: presence=1, pos=(6,0), type=0, ts=1757018896
  LUM[57]: presence=0, pos=(7,0), type=0, ts=1757018896

4. Test du parser VORAX...
  Parsing du code VORAX:
zone A, B, C;
mem buf;
emit A += 3•;
split A -> [B, C];
move B -> C, 1•;

  ✓ Parsing réussi, AST créé:
    ZONE_DECLARATION: program
      ZONE_DECLARATION: 
        ZONE_DECLARATION: A
        ZONE_DECLARATION: B
        ZONE_DECLARATION: C
      MEMORY_DECLARATION: 
        MEMORY_DECLARATION: buf
      EMIT_STATEMENT: A 3
      SPLIT_STATEMENT: A
      MOVE_STATEMENT: B -> C
  ✓ Exécution: Succès
  Zones créées: 3
  Mémoires créées: 1

5. Scénario complet...
  Scénario: Pipeline de traitement LUM avec logging complet
  ✓ Émission de 7 LUMs dans Input
  ✓ Déplacement vers Process: Moved 7 LUMs from Input to Process
  ✓ Stockage en mémoire: Stored 2 LUMs in memory buffer
  ✓ Récupération vers Output: Retrieved 2 LUMs from memory buffer to zone Output
  État final:
    Input: vide
    Process: non-vide
    Output: non-vide
    Buffer: occupé
  ✓ Scénario complet terminé

Démo terminée avec succès!
Consultez le fichier lum_vorax.log pour les détails.
